{"expireTime":9007200885691980000,"key":"transformer-remark-markdown-ast-1780dd7da29b76a0a5f07faed7d4452f-gatsby-remark-classesgatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"I recently stumbled on a term that was brought up in a few conversations related to Jetpack Compose. It's being referred to as ‚Äúdonut-hole skipping‚Äù . The name certainly intrigued me enough to go down the rabbit hole, or in this case, the donut hole üç© Given how early we are in the Jetpack Compose journey, I think it would be valuable to cover some basic concepts to get everyone at the same baseline before we dough (üòâ) into the more interesting bits.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":456,"offset":456}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":456,"offset":456}},"data":{"hProperties":{"className":["para"]}}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Recomposition","position":{"start":{"line":4,"column":3,"offset":460},"end":{"line":4,"column":16,"offset":473}}}],"position":{"start":{"line":4,"column":1,"offset":458},"end":{"line":4,"column":16,"offset":473}},"data":{"hProperties":{"className":["heading"]}}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Recomposition is the process of calling your composable functions again when its inputs change","position":{"start":{"line":6,"column":3,"offset":477},"end":{"line":6,"column":97,"offset":571}}}],"position":{"start":{"line":6,"column":3,"offset":477},"end":{"line":6,"column":97,"offset":571}},"data":{"hProperties":{"className":["para"]}}}],"position":{"start":{"line":6,"column":1,"offset":475},"end":{"line":6,"column":97,"offset":571}}},{"type":"paragraph","children":[{"type":"text","value":"At a high level, anytime the inputs or the state of a ","position":{"start":{"line":8,"column":1,"offset":573},"end":{"line":8,"column":55,"offset":627}}},{"type":"html","value":"<code class=\"language-text\">@Composable</code>","position":{"start":{"line":8,"column":55,"offset":627},"end":{"line":8,"column":68,"offset":640}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" function changes, it would be valuable for the function to be invoked again so that the latest changes are reflected. This behavior is critical to how Jetpack Compose works and is also what makes it so powerful as this reactive nature is a first class citizen of the framework. If I were to oversimplify this, anyone familiar with the classic Android View system might remember a method called ","position":{"start":{"line":8,"column":68,"offset":640},"end":{"line":8,"column":463,"offset":1035}}},{"type":"html","value":"<code class=\"language-text\">invalidate()</code>","position":{"start":{"line":8,"column":463,"offset":1035},"end":{"line":8,"column":477,"offset":1049}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" that was used to ensure that the latest state of the ","position":{"start":{"line":8,"column":477,"offset":1049},"end":{"line":8,"column":531,"offset":1103}}},{"type":"html","value":"<code class=\"language-text\">View</code>","position":{"start":{"line":8,"column":531,"offset":1103},"end":{"line":8,"column":537,"offset":1109}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" was represented on the screen.","position":{"start":{"line":8,"column":537,"offset":1109},"end":{"line":8,"column":568,"offset":1140}}}],"position":{"start":{"line":8,"column":1,"offset":573},"end":{"line":8,"column":568,"offset":1140}},"data":{"hProperties":{"className":["para"]}}},{"type":"paragraph","children":[{"type":"text","value":"This is effectively what recomposition is responsible for as well with an important nuance - it's much smarter than the previous UI toolkit as it will avoid redundant work when possible using smart optimizations. With that said, let's look at some examples of recomposition in action and hopefully it will lead us to this hunger inducing optimization that I spoke about at the start of this post.","position":{"start":{"line":10,"column":1,"offset":1142},"end":{"line":10,"column":397,"offset":1538}}}],"position":{"start":{"line":10,"column":1,"offset":1142},"end":{"line":10,"column":397,"offset":1538}},"data":{"hProperties":{"className":["para"]}}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example 1","position":{"start":{"line":12,"column":4,"offset":1543},"end":{"line":12,"column":13,"offset":1552}}}],"position":{"start":{"line":12,"column":1,"offset":1540},"end":{"line":12,"column":13,"offset":1552}},"data":{"hProperties":{"className":["subheading"]}}},{"type":"html","lang":"kotlin","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> counter <span class=\"token keyword\">by</span> remember <span class=\"token punctuation\">{</span> <span class=\"token function\">mutableStateOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">CustomText</span><span class=\"token punctuation\">(</span>\n        text <span class=\"token operator\">=</span> <span class=\"token string\">\"Counter: <span class=\"token interpolation variable\">$counter</span>\"</span><span class=\"token punctuation\">,</span>\n        modifier <span class=\"token operator\">=</span> Modifier\n            <span class=\"token punctuation\">.</span><span class=\"token function\">clickable</span> <span class=\"token punctuation\">{</span>\n                counter<span class=\"token operator\">++</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">CustomText</span><span class=\"token punctuation\">(</span>\n    text<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    modifier<span class=\"token operator\">:</span> Modifier<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n        text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">,</span>\n        modifier <span class=\"token operator\">=</span> modifier<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        style <span class=\"token operator\">=</span> <span class=\"token function\">TextStyle</span><span class=\"token punctuation\">(</span>\n            fontSize <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">.</span>sp<span class=\"token punctuation\">,</span>\n            textDecoration <span class=\"token operator\">=</span> TextDecoration<span class=\"token punctuation\">.</span>Underline<span class=\"token punctuation\">,</span>\n            fontFamily <span class=\"token operator\">=</span> FontFamily<span class=\"token punctuation\">.</span>Monospace\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":14,"column":1,"offset":1554},"end":{"line":42,"column":4,"offset":2129}}},{"type":"paragraph","children":[{"type":"text","value":"We created a simple composable function called ","position":{"start":{"line":44,"column":1,"offset":2131},"end":{"line":44,"column":48,"offset":2178}}},{"type":"html","value":"<code class=\"language-text\">MyComponent</code>","position":{"start":{"line":44,"column":48,"offset":2178},"end":{"line":44,"column":61,"offset":2191}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" that initializes a state object to hold the value of ","position":{"start":{"line":44,"column":61,"offset":2191},"end":{"line":44,"column":115,"offset":2245}}},{"type":"html","value":"<code class=\"language-text\">counter</code>","position":{"start":{"line":44,"column":115,"offset":2245},"end":{"line":44,"column":124,"offset":2254}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":". This value is rendered by the ","position":{"start":{"line":44,"column":124,"offset":2254},"end":{"line":44,"column":156,"offset":2286}}},{"type":"html","value":"<code class=\"language-text\">Text</code>","position":{"start":{"line":44,"column":156,"offset":2286},"end":{"line":44,"column":162,"offset":2292}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" composable and every time you tap on this text, counter is incremented. What we are interested to see is which parts of this function are reinvoked. In order to investigate this further, we are going to use log statements. But we want to trigger these log statements only when recompositions are happening. This sounds like the perfect use case for ","position":{"start":{"line":44,"column":162,"offset":2292},"end":{"line":44,"column":512,"offset":2642}}},{"type":"link","title":null,"url":"https://developer.android.com/jetpack/compose/side-effects#sideeffect-publish","children":[{"type":"text","value":"SideEffect","position":{"start":{"line":44,"column":513,"offset":2643},"end":{"line":44,"column":523,"offset":2653}}}],"position":{"start":{"line":44,"column":512,"offset":2642},"end":{"line":44,"column":603,"offset":2733}},"data":{"hProperties":{"className":["url"]}}},{"type":"text","value":", a composable function that is reinvoked on every successful recomposition. Since we need to use this in a few places, let's write a helper function that will be useful for this investigation across all the examples. I'd like to credit my friend ","position":{"start":{"line":44,"column":603,"offset":2733},"end":{"line":44,"column":850,"offset":2980}}},{"type":"link","title":null,"url":"https://twitter.com/objcode","children":[{"type":"text","value":"Sean McQuillan","position":{"start":{"line":44,"column":851,"offset":2981},"end":{"line":44,"column":865,"offset":2995}}}],"position":{"start":{"line":44,"column":850,"offset":2980},"end":{"line":44,"column":895,"offset":3025}},"data":{"hProperties":{"className":["url"]}}},{"type":"text","value":" for the code snippet below üôè","position":{"start":{"line":44,"column":895,"offset":3025},"end":{"line":44,"column":925,"offset":3055}}}],"position":{"start":{"line":44,"column":1,"offset":2131},"end":{"line":44,"column":925,"offset":3055}},"data":{"hProperties":{"className":["para"]}}},{"type":"html","lang":"kotlin","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">Ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> value<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Note the inline function below which ensures that this function is essentially</span>\n<span class=\"token comment\">// copied at the call site to ensure that its logging only recompositions from the</span>\n<span class=\"token comment\">// original call site.</span>\n<span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">LogCompositions</span><span class=\"token punctuation\">(</span>tag<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>BuildConfig<span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> ref <span class=\"token operator\">=</span> remember <span class=\"token punctuation\">{</span> <span class=\"token function\">Ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        SideEffect <span class=\"token punctuation\">{</span> ref<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span> <span class=\"token punctuation\">}</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Compositions: <span class=\"token interpolation variable\">$msg</span> <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>ref<span class=\"token punctuation\">.</span>value<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":46,"column":1,"offset":3057},"end":{"line":60,"column":4,"offset":3516}}},{"type":"paragraph","children":[{"type":"text","value":"Let's make use of this helper function in our example and give it a spin!","position":{"start":{"line":62,"column":1,"offset":3518},"end":{"line":62,"column":74,"offset":3591}}}],"position":{"start":{"line":62,"column":1,"offset":3518},"end":{"line":62,"column":74,"offset":3591}},"data":{"hProperties":{"className":["para"]}}},{"type":"html","lang":"diff","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">@Composable\nfun MyComponent() {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   val counter by remember { mutableStateOf(0) }\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>   LogCompositions(\"JetpackCompose.app\", \"MyComposable function\")\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   CustomText(\n<span class=\"token prefix unchanged\"> </span>       text = \"Counter: $counter\",\n<span class=\"token prefix unchanged\"> </span>       modifier = Modifier\n<span class=\"token prefix unchanged\"> </span>           .clickable {\n<span class=\"token prefix unchanged\"> </span>               counter++\n<span class=\"token prefix unchanged\"> </span>           },\n<span class=\"token prefix unchanged\"> </span>   )\n</span>}\n\n@Composable\nfun CustomText(\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   text: String,\n<span class=\"token prefix unchanged\"> </span>   modifier: Modifier = Modifier,\n</span>) {\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>   LogCompositions(\"JetpackCompose.app\", \"CustomText function\")\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   Text(\n<span class=\"token prefix unchanged\"> </span>       text = text,\n<span class=\"token prefix unchanged\"> </span>       modifier = modifier.padding(32.dp),\n<span class=\"token prefix unchanged\"> </span>       style = TextStyle(\n<span class=\"token prefix unchanged\"> </span>           fontSize = 20.sp,\n<span class=\"token prefix unchanged\"> </span>           textDecoration = TextDecoration.Underline,\n<span class=\"token prefix unchanged\"> </span>           fontFamily = FontFamily.Monospace\n<span class=\"token prefix unchanged\"> </span>       )\n<span class=\"token prefix unchanged\"> </span>   )\n</span>}</code></pre></div>","position":{"start":{"line":64,"column":1,"offset":3593},"end":{"line":97,"column":4,"offset":4312}}},{"type":"paragraph","children":[{"type":"text","value":"On running this example, we notice that both ","position":{"start":{"line":99,"column":1,"offset":4314},"end":{"line":99,"column":46,"offset":4359}}},{"type":"html","value":"<code class=\"language-text\">MyComponent</code>","position":{"start":{"line":99,"column":46,"offset":4359},"end":{"line":99,"column":59,"offset":4372}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" & ","position":{"start":{"line":99,"column":59,"offset":4372},"end":{"line":99,"column":62,"offset":4375}}},{"type":"html","value":"<code class=\"language-text\">CustomText</code>","position":{"start":{"line":99,"column":62,"offset":4375},"end":{"line":99,"column":74,"offset":4387}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" are recomposed every time the value of the counter changes. We'll keep this in mind and look at another example so that we can compare the behavior and hopefully derive some insights ü§ûüèª","position":{"start":{"line":99,"column":74,"offset":4387},"end":{"line":99,"column":262,"offset":4575}}}],"position":{"start":{"line":99,"column":1,"offset":4314},"end":{"line":99,"column":262,"offset":4575}},"data":{"hProperties":{"className":["para"]}}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/articles/donut-hole-skipping/donut-hole-skipping-example-1.gif","alt":"Example 1","position":{"start":{"line":101,"column":1,"offset":4577},"end":{"line":101,"column":78,"offset":4654}},"data":{"hProperties":{"className":["img"]}}},{"type":"text","value":"\n","position":{"start":{"line":101,"column":78,"offset":4654},"end":{"line":102,"column":1,"offset":4655}}},{"type":"emphasis","children":[{"type":"text","value":"TODO: Example 1","position":{"start":{"line":102,"column":2,"offset":4656},"end":{"line":102,"column":17,"offset":4671}}}],"position":{"start":{"line":102,"column":1,"offset":4655},"end":{"line":102,"column":18,"offset":4672}}}],"position":{"start":{"line":101,"column":1,"offset":4577},"end":{"line":102,"column":18,"offset":4672}},"data":{"hProperties":{"className":["para"]}}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example 2","position":{"start":{"line":104,"column":4,"offset":4677},"end":{"line":104,"column":13,"offset":4686}}}],"position":{"start":{"line":104,"column":1,"offset":4674},"end":{"line":104,"column":13,"offset":4686}},"data":{"hProperties":{"className":["subheading"]}}},{"type":"html","lang":"diff","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">@Composable\nfun MyComponent() {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   val counter by remember { mutableStateOf(0) }\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   LogCompositions(\"JetpackCompose.app\", \"MyComposable function\")\n</span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>   Button(onClick = { counter++ }) {\n<span class=\"token prefix inserted\">+</span>       LogCompositions(\"JetpackCompose.app\", \"Button\")\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       CustomText(\n<span class=\"token prefix unchanged\"> </span>           text = \"Counter: $counter\",\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>            modifier = Modifier\n<span class=\"token prefix deleted\">-</span>                .clickable {\n<span class=\"token prefix deleted\">-</span>                    counter++\n<span class=\"token prefix deleted\">-</span>                },\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>       )\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>   }\n</span>}</code></pre></div>","position":{"start":{"line":106,"column":1,"offset":4688},"end":{"line":124,"column":4,"offset":5136}}},{"type":"paragraph","children":[{"type":"text","value":"We are reusing our previous example with a small difference - we introduce a ","position":{"start":{"line":126,"column":1,"offset":5138},"end":{"line":126,"column":78,"offset":5215}}},{"type":"html","value":"<code class=\"language-text\">Button</code>","position":{"start":{"line":126,"column":78,"offset":5215},"end":{"line":126,"column":86,"offset":5223}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" composable to handle our click logic and moved the ","position":{"start":{"line":126,"column":86,"offset":5223},"end":{"line":126,"column":138,"offset":5275}}},{"type":"html","value":"<code class=\"language-text\">CustomText</code>","position":{"start":{"line":126,"column":138,"offset":5275},"end":{"line":126,"column":150,"offset":5287}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" function inside the scope of the ","position":{"start":{"line":126,"column":150,"offset":5287},"end":{"line":126,"column":184,"offset":5321}}},{"type":"html","value":"<code class=\"language-text\">Button</code>","position":{"start":{"line":126,"column":184,"offset":5321},"end":{"line":126,"column":192,"offset":5329}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" function. We also added a log statement inside the scope of the Button function to check if that lambda is being executed. Let's run this example and monitor the log statements.","position":{"start":{"line":126,"column":192,"offset":5329},"end":{"line":126,"column":370,"offset":5507}}}],"position":{"start":{"line":126,"column":1,"offset":5138},"end":{"line":126,"column":370,"offset":5507}},"data":{"hProperties":{"className":["para"]}}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/articles/donut-hole-skipping/donut-hole-skipping-example-2.gif","alt":"Example 2","position":{"start":{"line":128,"column":1,"offset":5509},"end":{"line":128,"column":78,"offset":5586}},"data":{"hProperties":{"className":["img"]}}},{"type":"text","value":"\n","position":{"start":{"line":128,"column":78,"offset":5586},"end":{"line":129,"column":1,"offset":5587}}},{"type":"emphasis","children":[{"type":"text","value":"TODO: Example 2","position":{"start":{"line":129,"column":2,"offset":5588},"end":{"line":129,"column":17,"offset":5603}}}],"position":{"start":{"line":129,"column":1,"offset":5587},"end":{"line":129,"column":18,"offset":5604}}}],"position":{"start":{"line":128,"column":1,"offset":5509},"end":{"line":129,"column":18,"offset":5604}},"data":{"hProperties":{"className":["para"]}}},{"type":"paragraph","children":[{"type":"text","value":"Here's where things start to get really interesting. We see that the body of ","position":{"start":{"line":131,"column":1,"offset":5606},"end":{"line":131,"column":78,"offset":5683}}},{"type":"html","value":"<code class=\"language-text\">MyComponent</code>","position":{"start":{"line":131,"column":78,"offset":5683},"end":{"line":131,"column":91,"offset":5696}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" was executed during the very first composition along with the body of the ","position":{"start":{"line":131,"column":91,"offset":5696},"end":{"line":131,"column":166,"offset":5771}}},{"type":"html","value":"<code class=\"language-text\">Button</code>","position":{"start":{"line":131,"column":166,"offset":5771},"end":{"line":131,"column":174,"offset":5779}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" composable and the","position":{"start":{"line":131,"column":174,"offset":5779},"end":{"line":131,"column":193,"offset":5798}}},{"type":"html","value":"<code class=\"language-text\">CustomText</code>","position":{"start":{"line":131,"column":193,"offset":5798},"end":{"line":131,"column":205,"offset":5810}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" composable. However, every subsequent recomposition only causes the ","position":{"start":{"line":131,"column":205,"offset":5810},"end":{"line":131,"column":274,"offset":5879}}},{"type":"html","value":"<code class=\"language-text\">Button</code>","position":{"start":{"line":131,"column":274,"offset":5879},"end":{"line":131,"column":282,"offset":5887}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" and the ","position":{"start":{"line":131,"column":282,"offset":5887},"end":{"line":131,"column":291,"offset":5896}}},{"type":"html","value":"<code class=\"language-text\">CustomText</code>","position":{"start":{"line":131,"column":291,"offset":5896},"end":{"line":131,"column":303,"offset":5908}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" composable to be invoked again while the body of ","position":{"start":{"line":131,"column":303,"offset":5908},"end":{"line":131,"column":353,"offset":5958}}},{"type":"html","value":"<code class=\"language-text\">MyComponent</code>","position":{"start":{"line":131,"column":353,"offset":5958},"end":{"line":131,"column":366,"offset":5971}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" is skipped altogether. Interesting..... ü§î","position":{"start":{"line":131,"column":366,"offset":5971},"end":{"line":131,"column":409,"offset":6014}}}],"position":{"start":{"line":131,"column":1,"offset":5606},"end":{"line":131,"column":409,"offset":6014}},"data":{"hProperties":{"className":["para"]}}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Recomposition Scope","position":{"start":{"line":133,"column":3,"offset":6018},"end":{"line":133,"column":22,"offset":6037}}}],"position":{"start":{"line":133,"column":1,"offset":6016},"end":{"line":133,"column":22,"offset":6037}},"data":{"hProperties":{"className":["heading"]}}},{"type":"paragraph","children":[{"type":"text","value":"In order to understand how Compose is able to optimize recompositions, it is important to take into account the scopes of the functions that we are using in our examples. Compose keeps track of these scopes under-the-hood and divides a Composable function into these smaller units for more efficient recompositions. In order to wrap our heads around what this means, let's look at both our examples again and understand the scopes that are available for the Compose runtime to do its book-keeping.","position":{"start":{"line":135,"column":1,"offset":6039},"end":{"line":135,"column":498,"offset":6536}}}],"position":{"start":{"line":135,"column":1,"offset":6039},"end":{"line":135,"column":498,"offset":6536}},"data":{"hProperties":{"className":["para"]}}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/articles/donut-hole-skipping/example1-scope.png","alt":"Example 1","position":{"start":{"line":137,"column":1,"offset":6538},"end":{"line":137,"column":63,"offset":6600}},"data":{"hProperties":{"className":["img"]}}},{"type":"text","value":"\n","position":{"start":{"line":137,"column":63,"offset":6600},"end":{"line":138,"column":1,"offset":6601}}},{"type":"emphasis","children":[{"type":"text","value":"TODO","position":{"start":{"line":138,"column":2,"offset":6602},"end":{"line":138,"column":6,"offset":6606}}}],"position":{"start":{"line":138,"column":1,"offset":6601},"end":{"line":138,"column":7,"offset":6607}}}],"position":{"start":{"line":137,"column":1,"offset":6538},"end":{"line":138,"column":7,"offset":6607}},"data":{"hProperties":{"className":["para"]}}},{"type":"paragraph","children":[{"type":"text","value":"We see that there's a couple lambda scopes at play in the first example i.e the scope of the ","position":{"start":{"line":140,"column":1,"offset":6609},"end":{"line":140,"column":94,"offset":6702}}},{"type":"html","value":"<code class=\"language-text\">MyComponent</code>","position":{"start":{"line":140,"column":94,"offset":6702},"end":{"line":140,"column":107,"offset":6715}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" function and the scope of ","position":{"start":{"line":140,"column":107,"offset":6715},"end":{"line":140,"column":134,"offset":6742}}},{"type":"html","value":"<code class=\"language-text\">CustomText</code>","position":{"start":{"line":140,"column":134,"offset":6742},"end":{"line":140,"column":146,"offset":6754}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" function. Furthermore, ","position":{"start":{"line":140,"column":146,"offset":6754},"end":{"line":140,"column":170,"offset":6778}}},{"type":"html","value":"<code class=\"language-text\">CustomText</code>","position":{"start":{"line":140,"column":170,"offset":6778},"end":{"line":140,"column":182,"offset":6790}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" is in the lambda scope of the ","position":{"start":{"line":140,"column":182,"offset":6790},"end":{"line":140,"column":213,"offset":6821}}},{"type":"html","value":"<code class=\"language-text\">MyComponent</code>","position":{"start":{"line":140,"column":213,"offset":6821},"end":{"line":140,"column":226,"offset":6834}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" function. When the value of the the counter changes, we previously noticed that both these scopes were being reinvoked and here's why -","position":{"start":{"line":140,"column":226,"offset":6834},"end":{"line":140,"column":362,"offset":6970}}}],"position":{"start":{"line":140,"column":1,"offset":6609},"end":{"line":140,"column":362,"offset":6970}},"data":{"hProperties":{"className":["para"]}}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">CustomText</code>","position":{"start":{"line":142,"column":3,"offset":6974},"end":{"line":142,"column":15,"offset":6986}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" is recomposed because its text parameter changed as it includes the counter value. This makes sense and is probably what you want anyway.","position":{"start":{"line":142,"column":15,"offset":6986},"end":{"line":142,"column":153,"offset":7124}}}],"position":{"start":{"line":142,"column":3,"offset":6974},"end":{"line":142,"column":153,"offset":7124}},"data":{"hProperties":{"className":["para"]}}}],"position":{"start":{"line":142,"column":1,"offset":6972},"end":{"line":142,"column":153,"offset":7124}},"data":{"hProperties":{"className":["listElement"]}}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">MyComponent</code>","position":{"start":{"line":143,"column":3,"offset":7127},"end":{"line":143,"column":16,"offset":7140}},"data":{"hProperties":{"className":["inline"]}}},{"type":"text","value":" is recomposed because its lambda scope captures the counter state object and there wasn't a smaller lambda scope available for any recomposition optimizations to kick in.","position":{"start":{"line":143,"column":16,"offset":7140},"end":{"line":143,"column":187,"offset":7311}}}],"position":{"start":{"line":143,"column":3,"offset":7127},"end":{"line":143,"column":187,"offset":7311}},"data":{"hProperties":{"className":["para"]}}}],"position":{"start":{"line":143,"column":1,"offset":7125},"end":{"line":143,"column":187,"offset":7311}},"data":{"hProperties":{"className":["listElement"]}}}],"position":{"start":{"line":142,"column":1,"offset":6972},"end":{"line":143,"column":187,"offset":7311}}},{"type":"paragraph","children":[{"type":"text","value":"Hey there","position":{"start":{"line":145,"column":1,"offset":7313},"end":{"line":145,"column":10,"offset":7322}}}],"position":{"start":{"line":145,"column":1,"offset":7313},"end":{"line":145,"column":10,"offset":7322}},"data":{"hProperties":{"className":["para"]}}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"/articles/donut-hole-skipping/example2-scope.png","alt":"Example 2","position":{"start":{"line":147,"column":1,"offset":7324},"end":{"line":147,"column":63,"offset":7386}},"data":{"hProperties":{"className":["img"]}}},{"type":"text","value":"\n","position":{"start":{"line":147,"column":63,"offset":7386},"end":{"line":148,"column":1,"offset":7387}}},{"type":"emphasis","children":[{"type":"text","value":"TODO","position":{"start":{"line":148,"column":2,"offset":7388},"end":{"line":148,"column":6,"offset":7392}}}],"position":{"start":{"line":148,"column":1,"offset":7387},"end":{"line":148,"column":7,"offset":7393}}}],"position":{"start":{"line":147,"column":1,"offset":7324},"end":{"line":148,"column":7,"offset":7393}},"data":{"hProperties":{"className":["para"]}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":149,"column":1,"offset":7394}}}}